// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"example.com/go-inventory-grpc/ent/orderdetails"
)

// OrderDetails is the model entity for the OrderDetails schema.
type OrderDetails struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OrderDetailId holds the value of the "OrderDetailId" field.
	OrderDetailId int `json:"OrderDetailId,omitempty"`
	// OrderId holds the value of the "OrderId" field.
	OrderId int `json:"OrderId,omitempty"`
	// ProductId holds the value of the "ProductId" field.
	ProductId int `json:"ProductId,omitempty"`
	// UnitPrice holds the value of the "UnitPrice" field.
	UnitPrice int `json:"UnitPrice,omitempty"`
	// Quantity holds the value of the "Quantity" field.
	Quantity int `json:"Quantity,omitempty"`
	// TotalPrice holds the value of the "TotalPrice" field.
	TotalPrice int `json:"TotalPrice,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrderDetails) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case orderdetails.FieldID, orderdetails.FieldOrderDetailId, orderdetails.FieldOrderId, orderdetails.FieldProductId, orderdetails.FieldUnitPrice, orderdetails.FieldQuantity, orderdetails.FieldTotalPrice:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type OrderDetails", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrderDetails fields.
func (od *OrderDetails) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case orderdetails.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			od.ID = int(value.Int64)
		case orderdetails.FieldOrderDetailId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field OrderDetailId", values[i])
			} else if value.Valid {
				od.OrderDetailId = int(value.Int64)
			}
		case orderdetails.FieldOrderId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field OrderId", values[i])
			} else if value.Valid {
				od.OrderId = int(value.Int64)
			}
		case orderdetails.FieldProductId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ProductId", values[i])
			} else if value.Valid {
				od.ProductId = int(value.Int64)
			}
		case orderdetails.FieldUnitPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field UnitPrice", values[i])
			} else if value.Valid {
				od.UnitPrice = int(value.Int64)
			}
		case orderdetails.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Quantity", values[i])
			} else if value.Valid {
				od.Quantity = int(value.Int64)
			}
		case orderdetails.FieldTotalPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field TotalPrice", values[i])
			} else if value.Valid {
				od.TotalPrice = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this OrderDetails.
// Note that you need to call OrderDetails.Unwrap() before calling this method if this OrderDetails
// was returned from a transaction, and the transaction was committed or rolled back.
func (od *OrderDetails) Update() *OrderDetailsUpdateOne {
	return (&OrderDetailsClient{config: od.config}).UpdateOne(od)
}

// Unwrap unwraps the OrderDetails entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (od *OrderDetails) Unwrap() *OrderDetails {
	_tx, ok := od.config.driver.(*txDriver)
	if !ok {
		panic("ent: OrderDetails is not a transactional entity")
	}
	od.config.driver = _tx.drv
	return od
}

// String implements the fmt.Stringer.
func (od *OrderDetails) String() string {
	var builder strings.Builder
	builder.WriteString("OrderDetails(")
	builder.WriteString(fmt.Sprintf("id=%v, ", od.ID))
	builder.WriteString("OrderDetailId=")
	builder.WriteString(fmt.Sprintf("%v", od.OrderDetailId))
	builder.WriteString(", ")
	builder.WriteString("OrderId=")
	builder.WriteString(fmt.Sprintf("%v", od.OrderId))
	builder.WriteString(", ")
	builder.WriteString("ProductId=")
	builder.WriteString(fmt.Sprintf("%v", od.ProductId))
	builder.WriteString(", ")
	builder.WriteString("UnitPrice=")
	builder.WriteString(fmt.Sprintf("%v", od.UnitPrice))
	builder.WriteString(", ")
	builder.WriteString("Quantity=")
	builder.WriteString(fmt.Sprintf("%v", od.Quantity))
	builder.WriteString(", ")
	builder.WriteString("TotalPrice=")
	builder.WriteString(fmt.Sprintf("%v", od.TotalPrice))
	builder.WriteByte(')')
	return builder.String()
}

// OrderDetailsSlice is a parsable slice of OrderDetails.
type OrderDetailsSlice []*OrderDetails

func (od OrderDetailsSlice) config(cfg config) {
	for _i := range od {
		od[_i].config = cfg
	}
}
