// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"example.com/go-inventory-grpc/ent/orderdetails"
	"example.com/go-inventory-grpc/ent/predicate"
)

// OrderDetailsUpdate is the builder for updating OrderDetails entities.
type OrderDetailsUpdate struct {
	config
	hooks    []Hook
	mutation *OrderDetailsMutation
}

// Where appends a list predicates to the OrderDetailsUpdate builder.
func (odu *OrderDetailsUpdate) Where(ps ...predicate.OrderDetails) *OrderDetailsUpdate {
	odu.mutation.Where(ps...)
	return odu
}

// SetUnitPrice sets the "UnitPrice" field.
func (odu *OrderDetailsUpdate) SetUnitPrice(i int) *OrderDetailsUpdate {
	odu.mutation.ResetUnitPrice()
	odu.mutation.SetUnitPrice(i)
	return odu
}

// SetNillableUnitPrice sets the "UnitPrice" field if the given value is not nil.
func (odu *OrderDetailsUpdate) SetNillableUnitPrice(i *int) *OrderDetailsUpdate {
	if i != nil {
		odu.SetUnitPrice(*i)
	}
	return odu
}

// AddUnitPrice adds i to the "UnitPrice" field.
func (odu *OrderDetailsUpdate) AddUnitPrice(i int) *OrderDetailsUpdate {
	odu.mutation.AddUnitPrice(i)
	return odu
}

// SetQuantity sets the "Quantity" field.
func (odu *OrderDetailsUpdate) SetQuantity(i int) *OrderDetailsUpdate {
	odu.mutation.ResetQuantity()
	odu.mutation.SetQuantity(i)
	return odu
}

// SetNillableQuantity sets the "Quantity" field if the given value is not nil.
func (odu *OrderDetailsUpdate) SetNillableQuantity(i *int) *OrderDetailsUpdate {
	if i != nil {
		odu.SetQuantity(*i)
	}
	return odu
}

// AddQuantity adds i to the "Quantity" field.
func (odu *OrderDetailsUpdate) AddQuantity(i int) *OrderDetailsUpdate {
	odu.mutation.AddQuantity(i)
	return odu
}

// SetTotalPrice sets the "TotalPrice" field.
func (odu *OrderDetailsUpdate) SetTotalPrice(i int) *OrderDetailsUpdate {
	odu.mutation.ResetTotalPrice()
	odu.mutation.SetTotalPrice(i)
	return odu
}

// SetNillableTotalPrice sets the "TotalPrice" field if the given value is not nil.
func (odu *OrderDetailsUpdate) SetNillableTotalPrice(i *int) *OrderDetailsUpdate {
	if i != nil {
		odu.SetTotalPrice(*i)
	}
	return odu
}

// AddTotalPrice adds i to the "TotalPrice" field.
func (odu *OrderDetailsUpdate) AddTotalPrice(i int) *OrderDetailsUpdate {
	odu.mutation.AddTotalPrice(i)
	return odu
}

// Mutation returns the OrderDetailsMutation object of the builder.
func (odu *OrderDetailsUpdate) Mutation() *OrderDetailsMutation {
	return odu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (odu *OrderDetailsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(odu.hooks) == 0 {
		affected, err = odu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderDetailsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			odu.mutation = mutation
			affected, err = odu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(odu.hooks) - 1; i >= 0; i-- {
			if odu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = odu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, odu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (odu *OrderDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := odu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (odu *OrderDetailsUpdate) Exec(ctx context.Context) error {
	_, err := odu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odu *OrderDetailsUpdate) ExecX(ctx context.Context) {
	if err := odu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (odu *OrderDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderdetails.Table,
			Columns: orderdetails.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderdetails.FieldID,
			},
		},
	}
	if ps := odu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := odu.mutation.UnitPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldUnitPrice,
		})
	}
	if value, ok := odu.mutation.AddedUnitPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldUnitPrice,
		})
	}
	if value, ok := odu.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldQuantity,
		})
	}
	if value, ok := odu.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldQuantity,
		})
	}
	if value, ok := odu.mutation.TotalPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldTotalPrice,
		})
	}
	if value, ok := odu.mutation.AddedTotalPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldTotalPrice,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, odu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// OrderDetailsUpdateOne is the builder for updating a single OrderDetails entity.
type OrderDetailsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderDetailsMutation
}

// SetUnitPrice sets the "UnitPrice" field.
func (oduo *OrderDetailsUpdateOne) SetUnitPrice(i int) *OrderDetailsUpdateOne {
	oduo.mutation.ResetUnitPrice()
	oduo.mutation.SetUnitPrice(i)
	return oduo
}

// SetNillableUnitPrice sets the "UnitPrice" field if the given value is not nil.
func (oduo *OrderDetailsUpdateOne) SetNillableUnitPrice(i *int) *OrderDetailsUpdateOne {
	if i != nil {
		oduo.SetUnitPrice(*i)
	}
	return oduo
}

// AddUnitPrice adds i to the "UnitPrice" field.
func (oduo *OrderDetailsUpdateOne) AddUnitPrice(i int) *OrderDetailsUpdateOne {
	oduo.mutation.AddUnitPrice(i)
	return oduo
}

// SetQuantity sets the "Quantity" field.
func (oduo *OrderDetailsUpdateOne) SetQuantity(i int) *OrderDetailsUpdateOne {
	oduo.mutation.ResetQuantity()
	oduo.mutation.SetQuantity(i)
	return oduo
}

// SetNillableQuantity sets the "Quantity" field if the given value is not nil.
func (oduo *OrderDetailsUpdateOne) SetNillableQuantity(i *int) *OrderDetailsUpdateOne {
	if i != nil {
		oduo.SetQuantity(*i)
	}
	return oduo
}

// AddQuantity adds i to the "Quantity" field.
func (oduo *OrderDetailsUpdateOne) AddQuantity(i int) *OrderDetailsUpdateOne {
	oduo.mutation.AddQuantity(i)
	return oduo
}

// SetTotalPrice sets the "TotalPrice" field.
func (oduo *OrderDetailsUpdateOne) SetTotalPrice(i int) *OrderDetailsUpdateOne {
	oduo.mutation.ResetTotalPrice()
	oduo.mutation.SetTotalPrice(i)
	return oduo
}

// SetNillableTotalPrice sets the "TotalPrice" field if the given value is not nil.
func (oduo *OrderDetailsUpdateOne) SetNillableTotalPrice(i *int) *OrderDetailsUpdateOne {
	if i != nil {
		oduo.SetTotalPrice(*i)
	}
	return oduo
}

// AddTotalPrice adds i to the "TotalPrice" field.
func (oduo *OrderDetailsUpdateOne) AddTotalPrice(i int) *OrderDetailsUpdateOne {
	oduo.mutation.AddTotalPrice(i)
	return oduo
}

// Mutation returns the OrderDetailsMutation object of the builder.
func (oduo *OrderDetailsUpdateOne) Mutation() *OrderDetailsMutation {
	return oduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oduo *OrderDetailsUpdateOne) Select(field string, fields ...string) *OrderDetailsUpdateOne {
	oduo.fields = append([]string{field}, fields...)
	return oduo
}

// Save executes the query and returns the updated OrderDetails entity.
func (oduo *OrderDetailsUpdateOne) Save(ctx context.Context) (*OrderDetails, error) {
	var (
		err  error
		node *OrderDetails
	)
	if len(oduo.hooks) == 0 {
		node, err = oduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderDetailsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			oduo.mutation = mutation
			node, err = oduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oduo.hooks) - 1; i >= 0; i-- {
			if oduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = oduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, oduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderDetails)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderDetailsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (oduo *OrderDetailsUpdateOne) SaveX(ctx context.Context) *OrderDetails {
	node, err := oduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oduo *OrderDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := oduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oduo *OrderDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := oduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oduo *OrderDetailsUpdateOne) sqlSave(ctx context.Context) (_node *OrderDetails, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   orderdetails.Table,
			Columns: orderdetails.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderdetails.FieldID,
			},
		},
	}
	id, ok := oduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OrderDetails.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orderdetails.FieldID)
		for _, f := range fields {
			if !orderdetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != orderdetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oduo.mutation.UnitPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldUnitPrice,
		})
	}
	if value, ok := oduo.mutation.AddedUnitPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldUnitPrice,
		})
	}
	if value, ok := oduo.mutation.Quantity(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldQuantity,
		})
	}
	if value, ok := oduo.mutation.AddedQuantity(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldQuantity,
		})
	}
	if value, ok := oduo.mutation.TotalPrice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldTotalPrice,
		})
	}
	if value, ok := oduo.mutation.AddedTotalPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldTotalPrice,
		})
	}
	_node = &OrderDetails{config: oduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orderdetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
