// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"example.com/go-inventory-grpc/ent/orderdetails"
)

// OrderDetailsCreate is the builder for creating a OrderDetails entity.
type OrderDetailsCreate struct {
	config
	mutation *OrderDetailsMutation
	hooks    []Hook
}

// SetOrderDetailId sets the "OrderDetailId" field.
func (odc *OrderDetailsCreate) SetOrderDetailId(i int) *OrderDetailsCreate {
	odc.mutation.SetOrderDetailId(i)
	return odc
}

// SetOrderId sets the "OrderId" field.
func (odc *OrderDetailsCreate) SetOrderId(i int) *OrderDetailsCreate {
	odc.mutation.SetOrderId(i)
	return odc
}

// SetProductId sets the "ProductId" field.
func (odc *OrderDetailsCreate) SetProductId(i int) *OrderDetailsCreate {
	odc.mutation.SetProductId(i)
	return odc
}

// SetUnitPrice sets the "UnitPrice" field.
func (odc *OrderDetailsCreate) SetUnitPrice(i int) *OrderDetailsCreate {
	odc.mutation.SetUnitPrice(i)
	return odc
}

// SetNillableUnitPrice sets the "UnitPrice" field if the given value is not nil.
func (odc *OrderDetailsCreate) SetNillableUnitPrice(i *int) *OrderDetailsCreate {
	if i != nil {
		odc.SetUnitPrice(*i)
	}
	return odc
}

// SetQuantity sets the "Quantity" field.
func (odc *OrderDetailsCreate) SetQuantity(i int) *OrderDetailsCreate {
	odc.mutation.SetQuantity(i)
	return odc
}

// SetNillableQuantity sets the "Quantity" field if the given value is not nil.
func (odc *OrderDetailsCreate) SetNillableQuantity(i *int) *OrderDetailsCreate {
	if i != nil {
		odc.SetQuantity(*i)
	}
	return odc
}

// SetTotalPrice sets the "TotalPrice" field.
func (odc *OrderDetailsCreate) SetTotalPrice(i int) *OrderDetailsCreate {
	odc.mutation.SetTotalPrice(i)
	return odc
}

// SetNillableTotalPrice sets the "TotalPrice" field if the given value is not nil.
func (odc *OrderDetailsCreate) SetNillableTotalPrice(i *int) *OrderDetailsCreate {
	if i != nil {
		odc.SetTotalPrice(*i)
	}
	return odc
}

// Mutation returns the OrderDetailsMutation object of the builder.
func (odc *OrderDetailsCreate) Mutation() *OrderDetailsMutation {
	return odc.mutation
}

// Save creates the OrderDetails in the database.
func (odc *OrderDetailsCreate) Save(ctx context.Context) (*OrderDetails, error) {
	var (
		err  error
		node *OrderDetails
	)
	odc.defaults()
	if len(odc.hooks) == 0 {
		if err = odc.check(); err != nil {
			return nil, err
		}
		node, err = odc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OrderDetailsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = odc.check(); err != nil {
				return nil, err
			}
			odc.mutation = mutation
			if node, err = odc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(odc.hooks) - 1; i >= 0; i-- {
			if odc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = odc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, odc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*OrderDetails)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from OrderDetailsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (odc *OrderDetailsCreate) SaveX(ctx context.Context) *OrderDetails {
	v, err := odc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (odc *OrderDetailsCreate) Exec(ctx context.Context) error {
	_, err := odc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odc *OrderDetailsCreate) ExecX(ctx context.Context) {
	if err := odc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (odc *OrderDetailsCreate) defaults() {
	if _, ok := odc.mutation.UnitPrice(); !ok {
		v := orderdetails.DefaultUnitPrice
		odc.mutation.SetUnitPrice(v)
	}
	if _, ok := odc.mutation.Quantity(); !ok {
		v := orderdetails.DefaultQuantity
		odc.mutation.SetQuantity(v)
	}
	if _, ok := odc.mutation.TotalPrice(); !ok {
		v := orderdetails.DefaultTotalPrice
		odc.mutation.SetTotalPrice(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (odc *OrderDetailsCreate) check() error {
	if _, ok := odc.mutation.OrderDetailId(); !ok {
		return &ValidationError{Name: "OrderDetailId", err: errors.New(`ent: missing required field "OrderDetails.OrderDetailId"`)}
	}
	if _, ok := odc.mutation.OrderId(); !ok {
		return &ValidationError{Name: "OrderId", err: errors.New(`ent: missing required field "OrderDetails.OrderId"`)}
	}
	if _, ok := odc.mutation.ProductId(); !ok {
		return &ValidationError{Name: "ProductId", err: errors.New(`ent: missing required field "OrderDetails.ProductId"`)}
	}
	if _, ok := odc.mutation.UnitPrice(); !ok {
		return &ValidationError{Name: "UnitPrice", err: errors.New(`ent: missing required field "OrderDetails.UnitPrice"`)}
	}
	if _, ok := odc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "Quantity", err: errors.New(`ent: missing required field "OrderDetails.Quantity"`)}
	}
	if _, ok := odc.mutation.TotalPrice(); !ok {
		return &ValidationError{Name: "TotalPrice", err: errors.New(`ent: missing required field "OrderDetails.TotalPrice"`)}
	}
	return nil
}

func (odc *OrderDetailsCreate) sqlSave(ctx context.Context) (*OrderDetails, error) {
	_node, _spec := odc.createSpec()
	if err := sqlgraph.CreateNode(ctx, odc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (odc *OrderDetailsCreate) createSpec() (*OrderDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &OrderDetails{config: odc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: orderdetails.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: orderdetails.FieldID,
			},
		}
	)
	if value, ok := odc.mutation.OrderDetailId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldOrderDetailId,
		})
		_node.OrderDetailId = value
	}
	if value, ok := odc.mutation.OrderId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldOrderId,
		})
		_node.OrderId = value
	}
	if value, ok := odc.mutation.ProductId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldProductId,
		})
		_node.ProductId = value
	}
	if value, ok := odc.mutation.UnitPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldUnitPrice,
		})
		_node.UnitPrice = value
	}
	if value, ok := odc.mutation.Quantity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldQuantity,
		})
		_node.Quantity = value
	}
	if value, ok := odc.mutation.TotalPrice(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: orderdetails.FieldTotalPrice,
		})
		_node.TotalPrice = value
	}
	return _node, _spec
}

// OrderDetailsCreateBulk is the builder for creating many OrderDetails entities in bulk.
type OrderDetailsCreateBulk struct {
	config
	builders []*OrderDetailsCreate
}

// Save creates the OrderDetails entities in the database.
func (odcb *OrderDetailsCreateBulk) Save(ctx context.Context) ([]*OrderDetails, error) {
	specs := make([]*sqlgraph.CreateSpec, len(odcb.builders))
	nodes := make([]*OrderDetails, len(odcb.builders))
	mutators := make([]Mutator, len(odcb.builders))
	for i := range odcb.builders {
		func(i int, root context.Context) {
			builder := odcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, odcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, odcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, odcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (odcb *OrderDetailsCreateBulk) SaveX(ctx context.Context) []*OrderDetails {
	v, err := odcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (odcb *OrderDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := odcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (odcb *OrderDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := odcb.Exec(ctx); err != nil {
		panic(err)
	}
}
