// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"example.com/go-inventory-grpc/ent/category"
	"example.com/go-inventory-grpc/ent/product"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProductID holds the value of the "product_id" field.
	ProductID int `json:"product_id,omitempty"`
	// ProductName holds the value of the "product_name" field.
	ProductName string `json:"product_name,omitempty"`
	// ProductDescription holds the value of the "product_description" field.
	ProductDescription string `json:"product_description,omitempty"`
	// ProductQuantity holds the value of the "product_quantity" field.
	ProductQuantity int `json:"product_quantity,omitempty"`
	// UnitPrice holds the value of the "unit_price" field.
	UnitPrice int `json:"unit_price,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProductQuery when eager-loading is set.
	Edges             ProductEdges `json:"edges"`
	category_products *int
}

// ProductEdges holds the relations/edges for other nodes in the graph.
type ProductEdges struct {
	// CategoryID holds the value of the category_id edge.
	CategoryID *Category `json:"category_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CategoryIDOrErr returns the CategoryID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProductEdges) CategoryIDOrErr() (*Category, error) {
	if e.loadedTypes[0] {
		if e.CategoryID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: category.Label}
		}
		return e.CategoryID, nil
	}
	return nil, &NotLoadedError{edge: "category_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldID, product.FieldProductID, product.FieldProductQuantity, product.FieldUnitPrice:
			values[i] = new(sql.NullInt64)
		case product.FieldProductName, product.FieldProductDescription:
			values[i] = new(sql.NullString)
		case product.ForeignKeys[0]: // category_products
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case product.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				pr.ProductID = int(value.Int64)
			}
		case product.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_name", values[i])
			} else if value.Valid {
				pr.ProductName = value.String
			}
		case product.FieldProductDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_description", values[i])
			} else if value.Valid {
				pr.ProductDescription = value.String
			}
		case product.FieldProductQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_quantity", values[i])
			} else if value.Valid {
				pr.ProductQuantity = int(value.Int64)
			}
		case product.FieldUnitPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_price", values[i])
			} else if value.Valid {
				pr.UnitPrice = int(value.Int64)
			}
		case product.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field category_products", value)
			} else if value.Valid {
				pr.category_products = new(int)
				*pr.category_products = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCategoryID queries the "category_id" edge of the Product entity.
func (pr *Product) QueryCategoryID() *CategoryQuery {
	return (&ProductClient{config: pr.config}).QueryCategoryID(pr)
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProductID))
	builder.WriteString(", ")
	builder.WriteString("product_name=")
	builder.WriteString(pr.ProductName)
	builder.WriteString(", ")
	builder.WriteString("product_description=")
	builder.WriteString(pr.ProductDescription)
	builder.WriteString(", ")
	builder.WriteString("product_quantity=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProductQuantity))
	builder.WriteString(", ")
	builder.WriteString("unit_price=")
	builder.WriteString(fmt.Sprintf("%v", pr.UnitPrice))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
