// Code generated by ent, DO NOT EDIT.

package category

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"example.com/go-inventory-grpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryID), v))
	})
}

// CategoryName applies equality check predicate on the "category_name" field. It's identical to CategoryNameEQ.
func CategoryName(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryName), v))
	})
}

// CategoryDescription applies equality check predicate on the "category_description" field. It's identical to CategoryDescriptionEQ.
func CategoryDescription(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryDescription), v))
	})
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryID), v))
	})
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategoryID), v))
	})
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...int) predicate.Category {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCategoryID), v...))
	})
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...int) predicate.Category {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCategoryID), v...))
	})
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategoryID), v))
	})
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategoryID), v))
	})
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategoryID), v))
	})
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v int) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategoryID), v))
	})
}

// CategoryNameEQ applies the EQ predicate on the "category_name" field.
func CategoryNameEQ(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryName), v))
	})
}

// CategoryNameNEQ applies the NEQ predicate on the "category_name" field.
func CategoryNameNEQ(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategoryName), v))
	})
}

// CategoryNameIn applies the In predicate on the "category_name" field.
func CategoryNameIn(vs ...string) predicate.Category {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCategoryName), v...))
	})
}

// CategoryNameNotIn applies the NotIn predicate on the "category_name" field.
func CategoryNameNotIn(vs ...string) predicate.Category {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCategoryName), v...))
	})
}

// CategoryNameGT applies the GT predicate on the "category_name" field.
func CategoryNameGT(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategoryName), v))
	})
}

// CategoryNameGTE applies the GTE predicate on the "category_name" field.
func CategoryNameGTE(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategoryName), v))
	})
}

// CategoryNameLT applies the LT predicate on the "category_name" field.
func CategoryNameLT(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategoryName), v))
	})
}

// CategoryNameLTE applies the LTE predicate on the "category_name" field.
func CategoryNameLTE(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategoryName), v))
	})
}

// CategoryNameContains applies the Contains predicate on the "category_name" field.
func CategoryNameContains(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCategoryName), v))
	})
}

// CategoryNameHasPrefix applies the HasPrefix predicate on the "category_name" field.
func CategoryNameHasPrefix(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCategoryName), v))
	})
}

// CategoryNameHasSuffix applies the HasSuffix predicate on the "category_name" field.
func CategoryNameHasSuffix(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCategoryName), v))
	})
}

// CategoryNameEqualFold applies the EqualFold predicate on the "category_name" field.
func CategoryNameEqualFold(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCategoryName), v))
	})
}

// CategoryNameContainsFold applies the ContainsFold predicate on the "category_name" field.
func CategoryNameContainsFold(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCategoryName), v))
	})
}

// CategoryDescriptionEQ applies the EQ predicate on the "category_description" field.
func CategoryDescriptionEQ(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategoryDescription), v))
	})
}

// CategoryDescriptionNEQ applies the NEQ predicate on the "category_description" field.
func CategoryDescriptionNEQ(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategoryDescription), v))
	})
}

// CategoryDescriptionIn applies the In predicate on the "category_description" field.
func CategoryDescriptionIn(vs ...string) predicate.Category {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCategoryDescription), v...))
	})
}

// CategoryDescriptionNotIn applies the NotIn predicate on the "category_description" field.
func CategoryDescriptionNotIn(vs ...string) predicate.Category {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCategoryDescription), v...))
	})
}

// CategoryDescriptionGT applies the GT predicate on the "category_description" field.
func CategoryDescriptionGT(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCategoryDescription), v))
	})
}

// CategoryDescriptionGTE applies the GTE predicate on the "category_description" field.
func CategoryDescriptionGTE(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCategoryDescription), v))
	})
}

// CategoryDescriptionLT applies the LT predicate on the "category_description" field.
func CategoryDescriptionLT(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCategoryDescription), v))
	})
}

// CategoryDescriptionLTE applies the LTE predicate on the "category_description" field.
func CategoryDescriptionLTE(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCategoryDescription), v))
	})
}

// CategoryDescriptionContains applies the Contains predicate on the "category_description" field.
func CategoryDescriptionContains(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCategoryDescription), v))
	})
}

// CategoryDescriptionHasPrefix applies the HasPrefix predicate on the "category_description" field.
func CategoryDescriptionHasPrefix(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCategoryDescription), v))
	})
}

// CategoryDescriptionHasSuffix applies the HasSuffix predicate on the "category_description" field.
func CategoryDescriptionHasSuffix(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCategoryDescription), v))
	})
}

// CategoryDescriptionEqualFold applies the EqualFold predicate on the "category_description" field.
func CategoryDescriptionEqualFold(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCategoryDescription), v))
	})
}

// CategoryDescriptionContainsFold applies the ContainsFold predicate on the "category_description" field.
func CategoryDescriptionContainsFold(v string) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCategoryDescription), v))
	})
}

// HasProducts applies the HasEdge predicate on the "products" edge.
func HasProducts() predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProductsWith applies the HasEdge predicate on the "products" edge with a given conditions (other predicates).
func HasProductsWith(preds ...predicate.Product) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ProductsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProductsTable, ProductsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Category) predicate.Category {
	return predicate.Category(func(s *sql.Selector) {
		p(s.Not())
	})
}
