// Code generated by ent, DO NOT EDIT.

package product

const (
	// Label holds the string label denoting the product type in the database.
	Label = "product"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldProductID holds the string denoting the product_id field in the database.
	FieldProductID = "product_id"
	// FieldProductName holds the string denoting the product_name field in the database.
	FieldProductName = "product_name"
	// FieldProductDescription holds the string denoting the product_description field in the database.
	FieldProductDescription = "product_description"
	// FieldProductQuantity holds the string denoting the product_quantity field in the database.
	FieldProductQuantity = "product_quantity"
	// FieldUnitPrice holds the string denoting the unit_price field in the database.
	FieldUnitPrice = "unit_price"
	// EdgeCategoryID holds the string denoting the category_id edge name in mutations.
	EdgeCategoryID = "category_id"
	// Table holds the table name of the product in the database.
	Table = "products"
	// CategoryIDTable is the table that holds the category_id relation/edge.
	CategoryIDTable = "products"
	// CategoryIDInverseTable is the table name for the Category entity.
	// It exists in this package in order to avoid circular dependency with the "category" package.
	CategoryIDInverseTable = "categories"
	// CategoryIDColumn is the table column denoting the category_id relation/edge.
	CategoryIDColumn = "category_products"
)

// Columns holds all SQL columns for product fields.
var Columns = []string{
	FieldID,
	FieldProductID,
	FieldProductName,
	FieldProductDescription,
	FieldProductQuantity,
	FieldUnitPrice,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "products"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"category_products",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
