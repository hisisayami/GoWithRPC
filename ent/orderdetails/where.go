// Code generated by ent, DO NOT EDIT.

package orderdetails

import (
	"entgo.io/ent/dialect/sql"
	"example.com/go-inventory-grpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// OrderDetailId applies equality check predicate on the "OrderDetailId" field. It's identical to OrderDetailIdEQ.
func OrderDetailId(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderDetailId), v))
	})
}

// OrderId applies equality check predicate on the "OrderId" field. It's identical to OrderIdEQ.
func OrderId(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderId), v))
	})
}

// ProductId applies equality check predicate on the "ProductId" field. It's identical to ProductIdEQ.
func ProductId(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductId), v))
	})
}

// UnitPrice applies equality check predicate on the "UnitPrice" field. It's identical to UnitPriceEQ.
func UnitPrice(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPrice), v))
	})
}

// Quantity applies equality check predicate on the "Quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// TotalPrice applies equality check predicate on the "TotalPrice" field. It's identical to TotalPriceEQ.
func TotalPrice(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalPrice), v))
	})
}

// OrderDetailIdEQ applies the EQ predicate on the "OrderDetailId" field.
func OrderDetailIdEQ(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderDetailId), v))
	})
}

// OrderDetailIdNEQ applies the NEQ predicate on the "OrderDetailId" field.
func OrderDetailIdNEQ(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderDetailId), v))
	})
}

// OrderDetailIdIn applies the In predicate on the "OrderDetailId" field.
func OrderDetailIdIn(vs ...int) predicate.OrderDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderDetailId), v...))
	})
}

// OrderDetailIdNotIn applies the NotIn predicate on the "OrderDetailId" field.
func OrderDetailIdNotIn(vs ...int) predicate.OrderDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderDetailId), v...))
	})
}

// OrderDetailIdGT applies the GT predicate on the "OrderDetailId" field.
func OrderDetailIdGT(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderDetailId), v))
	})
}

// OrderDetailIdGTE applies the GTE predicate on the "OrderDetailId" field.
func OrderDetailIdGTE(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderDetailId), v))
	})
}

// OrderDetailIdLT applies the LT predicate on the "OrderDetailId" field.
func OrderDetailIdLT(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderDetailId), v))
	})
}

// OrderDetailIdLTE applies the LTE predicate on the "OrderDetailId" field.
func OrderDetailIdLTE(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderDetailId), v))
	})
}

// OrderIdEQ applies the EQ predicate on the "OrderId" field.
func OrderIdEQ(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrderId), v))
	})
}

// OrderIdNEQ applies the NEQ predicate on the "OrderId" field.
func OrderIdNEQ(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrderId), v))
	})
}

// OrderIdIn applies the In predicate on the "OrderId" field.
func OrderIdIn(vs ...int) predicate.OrderDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOrderId), v...))
	})
}

// OrderIdNotIn applies the NotIn predicate on the "OrderId" field.
func OrderIdNotIn(vs ...int) predicate.OrderDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOrderId), v...))
	})
}

// OrderIdGT applies the GT predicate on the "OrderId" field.
func OrderIdGT(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrderId), v))
	})
}

// OrderIdGTE applies the GTE predicate on the "OrderId" field.
func OrderIdGTE(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrderId), v))
	})
}

// OrderIdLT applies the LT predicate on the "OrderId" field.
func OrderIdLT(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrderId), v))
	})
}

// OrderIdLTE applies the LTE predicate on the "OrderId" field.
func OrderIdLTE(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrderId), v))
	})
}

// ProductIdEQ applies the EQ predicate on the "ProductId" field.
func ProductIdEQ(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProductId), v))
	})
}

// ProductIdNEQ applies the NEQ predicate on the "ProductId" field.
func ProductIdNEQ(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProductId), v))
	})
}

// ProductIdIn applies the In predicate on the "ProductId" field.
func ProductIdIn(vs ...int) predicate.OrderDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProductId), v...))
	})
}

// ProductIdNotIn applies the NotIn predicate on the "ProductId" field.
func ProductIdNotIn(vs ...int) predicate.OrderDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProductId), v...))
	})
}

// ProductIdGT applies the GT predicate on the "ProductId" field.
func ProductIdGT(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProductId), v))
	})
}

// ProductIdGTE applies the GTE predicate on the "ProductId" field.
func ProductIdGTE(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProductId), v))
	})
}

// ProductIdLT applies the LT predicate on the "ProductId" field.
func ProductIdLT(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProductId), v))
	})
}

// ProductIdLTE applies the LTE predicate on the "ProductId" field.
func ProductIdLTE(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProductId), v))
	})
}

// UnitPriceEQ applies the EQ predicate on the "UnitPrice" field.
func UnitPriceEQ(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceNEQ applies the NEQ predicate on the "UnitPrice" field.
func UnitPriceNEQ(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceIn applies the In predicate on the "UnitPrice" field.
func UnitPriceIn(vs ...int) predicate.OrderDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnitPrice), v...))
	})
}

// UnitPriceNotIn applies the NotIn predicate on the "UnitPrice" field.
func UnitPriceNotIn(vs ...int) predicate.OrderDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnitPrice), v...))
	})
}

// UnitPriceGT applies the GT predicate on the "UnitPrice" field.
func UnitPriceGT(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceGTE applies the GTE predicate on the "UnitPrice" field.
func UnitPriceGTE(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceLT applies the LT predicate on the "UnitPrice" field.
func UnitPriceLT(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnitPrice), v))
	})
}

// UnitPriceLTE applies the LTE predicate on the "UnitPrice" field.
func UnitPriceLTE(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnitPrice), v))
	})
}

// QuantityEQ applies the EQ predicate on the "Quantity" field.
func QuantityEQ(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldQuantity), v))
	})
}

// QuantityNEQ applies the NEQ predicate on the "Quantity" field.
func QuantityNEQ(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldQuantity), v))
	})
}

// QuantityIn applies the In predicate on the "Quantity" field.
func QuantityIn(vs ...int) predicate.OrderDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldQuantity), v...))
	})
}

// QuantityNotIn applies the NotIn predicate on the "Quantity" field.
func QuantityNotIn(vs ...int) predicate.OrderDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldQuantity), v...))
	})
}

// QuantityGT applies the GT predicate on the "Quantity" field.
func QuantityGT(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldQuantity), v))
	})
}

// QuantityGTE applies the GTE predicate on the "Quantity" field.
func QuantityGTE(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldQuantity), v))
	})
}

// QuantityLT applies the LT predicate on the "Quantity" field.
func QuantityLT(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldQuantity), v))
	})
}

// QuantityLTE applies the LTE predicate on the "Quantity" field.
func QuantityLTE(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldQuantity), v))
	})
}

// TotalPriceEQ applies the EQ predicate on the "TotalPrice" field.
func TotalPriceEQ(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceNEQ applies the NEQ predicate on the "TotalPrice" field.
func TotalPriceNEQ(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceIn applies the In predicate on the "TotalPrice" field.
func TotalPriceIn(vs ...int) predicate.OrderDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalPrice), v...))
	})
}

// TotalPriceNotIn applies the NotIn predicate on the "TotalPrice" field.
func TotalPriceNotIn(vs ...int) predicate.OrderDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalPrice), v...))
	})
}

// TotalPriceGT applies the GT predicate on the "TotalPrice" field.
func TotalPriceGT(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceGTE applies the GTE predicate on the "TotalPrice" field.
func TotalPriceGTE(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceLT applies the LT predicate on the "TotalPrice" field.
func TotalPriceLT(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceLTE applies the LTE predicate on the "TotalPrice" field.
func TotalPriceLTE(v int) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalPrice), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OrderDetails) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OrderDetails) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OrderDetails) predicate.OrderDetails {
	return predicate.OrderDetails(func(s *sql.Selector) {
		p(s.Not())
	})
}
